<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:task="http://www.springframework.org/schema/task"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd">

    <context:component-scan base-package="com.mahendracandi.springschedulerquartz"/>

    <!--ada dua cara menggunakan quartz-->
    <!-- 1. menggunakan MethodInvokingJobDetailFactoryBean-->
    <!--For times when you just need to invoke a method on a specific object-->
    <bean id="simpleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="myBean"/>
        <property name="targetMethod" value="printMessage"/>
    </bean>

    <!-- 2. menggunakan JobDetailFactoryBean-->
    <!--untuk setup lebih lanjut, tentunya lebih flexible-->
    <!-- For times when you need more complex processing, passing data to the scheduled job -->
    <bean name="complexJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <!--job class menghubungkan ke sebuah class yang meng-extends QuartxJobBean-->
        <property name="jobClass" value="com.mahendracandi.springschedulerquartz.quartz.ScheduleJob"/>
        <!--jobDataMap untuk menyalurkan data ke job bean-->
        <property name="jobDataMap">
            <map>
                <entry key="anotherBean" value-ref="anotherBean"/>
            </map>
        </property>
        <property name="durability" value="true"/>
    </bean>


    <!--KONFIGURASI TRIGGER-->
    <!--ada dua kemungkinan trigger-->
    <!--1. Simple Trigger, menggunakan SimpleTriggerFactoryBean-->
    <!--You can specify start time, delay between triggers and repeatInterval(frequency) to run the job.-->
    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="simpleJobDetail"/>
        <property name="startDelay" value="1000"/>
        <property name="repeatInterval" value="2000"/>
    </bean>

    <!--2. Cron Trigger, menggunakan cronTriggerFactoryBean-->
    <!--Itâ€™s more flexible and allows you to choose scheduled job at specific instance (time, day, date,..) and frequency in future.-->
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="complexJobDetail"/>
        <!--cron expressions! see more about sintax at Baeldung website-->
        <property name="cronExpression" value="0/5 * * ? * *"/>
    </bean>

    <!--KONFIGURASI SCHEDULERFACTORYBEAN YANG MEMBUAT DAN MENGKONFIGURASI QUARTZ SCHEDULERFACTORYBEAN-->
    <!-- scheduler factory bean to glue together jobdetails and triggers to configure quartz scheduler -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobDetails">
            <list>
                <ref bean="simpleJobDetail"/>
                <ref bean="complexJobDetail"/>
            </list>
        </property>

        <property name="triggers">
            <list>
                <ref bean="simpleTrigger"/>
                <ref bean="cronTrigger"/>
            </list>
        </property>
    </bean>
</beans>